extends layout

block headContent
	title Transaction #{txid}
	style.
		.field {
			word-wrap: break-word;
		}
		

block content
	if (!result || !result.getrawtransaction)
		+pageTitle("Transaction", txid, true)

		if (block)
			+contentSection("Summary")
				+summaryRow(2)
					+summaryItem("Block")
						a(href=`./block/${block.hash}`) ##{block.height.toLocaleString()}

					+summaryItem("Date")
						if (block.time)
							+timestamp(block.time)

						else
							| ?
								

		+warningAlert
			h6.mb-2 Transaction Details Unavailable

			if (blockHeight && global.prunedBlockchain && blockHeight < global.pruneHeight)
				.mb-2 Blockchain <b>pruning</b> is enabled on your node. This setting tells your node that after validating transactions it may discard data that is non-essential for future validation needs.
				.mb-0 The block that contains this transaction has been pruned, meaning that non-essential data has been deleted, including the details of this transaction.
				

			else if (!global.txindexAvailable)
				| !{markdown(noTxIndexMsg)}

	if (result && result.getrawtransaction)
		+pageTitle("Transaction", txid, true, [["coinbase", "This is a coinbase transaction."]])

		+pageTabs(["Details", "Scripts", "JSON"])


		- DecimalRounded = Decimal.clone({ precision: 4, rounding: 2 })

		- var totalInputValue = new Decimal(0);
		if (result.getrawtransaction.vin[0].coinbase)
			- totalInputValue = totalInputValue.plus(new Decimal(coinConfig.blockRewardFunction(result.getblock.height, activeBlockchain)));
		each txInput, txInputIndex in result.txInputs
			if (txInput)
				- var vout = txInput;
				if (vout.value)
					- totalInputValue = totalInputValue.plus(new Decimal(vout.value));

		- var totalOutputValue = new Decimal(0);
		each vout, voutIndex in result.getrawtransaction.vout
			- totalOutputValue = totalOutputValue.plus(new Decimal(vout.value));

		div.tab-content
			+pageTab("Details", true)
				
				if (global.specialTransactions && global.specialTransactions[txid])
					- var stInfo = global.specialTransactions[txid];

					+funAlert(stInfo.alertBodyHtml, stInfo.summary, stInfo.referenceUrl)


				.clearfix
					.float-end
						if (`${userSettings["txPageShowTechDetails"]}` == "false")
							a.btn.btn-primary.btn-sm.me-2(href=`./changeSetting?name=txPageShowTechDetails&value=true`, title="Display technical details for this transaction.", data-bs-toggle="tooltip")
								i.far.fa-plus-square.me-2
								| Technical Details
					

				- var isTxConfirmed = true;
				if (!result.getrawtransaction.confirmations || result.getrawtransaction.confirmations == 0)
					- isTxConfirmed = false;

				if (isCoinbaseTx)
					- var minerInfo = utils.getMinerFromCoinbaseTx(result.getrawtransaction);

				+contentSection("Summary")
					+summaryRow((isTxConfirmed ? 2 : 3) + (isCoinbaseTx ? 1 : 2) + (isCoinbaseTx && minerInfo ? 1 : 0))
						if (!isTxConfirmed)
							+summaryItem("Status")
								span.text-danger Unconfirmed

							+summaryItem("First Seen", "The time when this transaction entered your node's mempool.")
								+timestamp(mempoolDetails.entry.time)

							+summaryItem("RBF", "Whether this unconfirmed transaction is replaceable using Replace-By-Fee.")
								- var replaceable = false;
								each vin, vinIndex in tx.vin
									// ref: https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki#summary
									if (vin.sequence < 4294967295 - 1)
										- replaceable = true;

								if (replaceable)
									span.text-success Yes

								else if (mempoolDetails.ancestors.length > 0)
									span.border-dotted(title="RBF may be signaled explicitly or implicitly. This transaction does not explicitly opt in, but if any of its unconfirmed ancestor transactions are replaceable then this one is too.", data-bs-toggle="tooltip") No explicit opt-in
									a.ms-2(href="https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki#summary", data-bs-toggle="tooltip", title="More info about RBF", target="_blank")
										i.fas.fa-info-circle
								else
									span No

						else
							+summaryItem("Block")
								a(href=`./block/${result.getrawtransaction.blockhash}`) #{result.getblock.height.toLocaleString()}
								small.ms-2.text-muted
									| (
									+confirmations(tx.confirmations)
									| )
							
							+summaryItem("Date")
								if (tx.time)
									td.font-monospace
										+timestamp(result.getrawtransaction.time)
										

						if (isCoinbaseTx)
							if (minerInfo)
								+summaryItem("Miner")
									if (minerInfo.identifiedBy)
										span(data-bs-toggle="tooltip", title=`Identified by: ${minerInfo.identifiedBy}`)
											+primaryBadge(minerInfo.name, false)

									else
										span
											+primaryBadge(minerInfo.name, false)
											

							+summaryItem("Fees Collected", "The aggregate fees collected by the miner that created this coinbase transaction.")
								- var currencyValue = new Decimal(totalOutputValue).minus(totalInputValue);
								+valueDisplay(currencyValue)

						else
							+summaryItem("Fee Rate", null, "sat/vB")
								if (!mempoolDetails && !global.txindexAvailable)
									span.border-dotted(title="Determining the fee of confirmed transactions requires txindex to be enabled", data-bs-toggle="tooltip")
										i.fas.fa-backspace.text-danger.me-2
										| ?

								else
									- var feePaid = mempoolDetails ? new Decimal(mempoolDetails.entry.fees.base) : new Decimal(totalInputValue).minus(totalOutputValue);
									
									span #{utils.addThousandsSeparators(new DecimalRounded(feePaid).dividedBy(tx.vsize).times(100000000))}

							+summaryItem("Total Fee")
								if (!mempoolDetails && !global.txindexAvailable)
									span.border-dotted(title="Determining the fee of confirmed transactions requires txindex to be enabled", data-bs-toggle="tooltip")
										i.fas.fa-backspace.text-danger.me-2
										| ?

								else
									- var feePaid = mempoolDetails ? new Decimal(mempoolDetails.entry.fees.base) : new Decimal(totalInputValue).minus(totalOutputValue);
									+valueDisplay(feePaid)
										


				- var daysDestroyed = new Decimal(0);
				each xInput, xInputIndex in tx.vin
					- var vout = null;
					if (result.txInputs && result.txInputs[xInputIndex])
						- var vout = result.txInputs[xInputIndex];
						
						if (vout.utxoTime)
							- var dt = result.getrawtransaction.time - vout.utxoTime;
							- var dtDays = dt / 60 / 60 / 24;
							- daysDestroyed = daysDestroyed.plus(new Decimal(vout.value).times(dtDays));

				+contentSection("Technical Details", true, "txPageShowTechDetails")
					if (isTxConfirmed)
						- var blockRewardMax = coinConfig.blockRewardFunction(result.getblock.height, activeBlockchain);
						- var valueDestroyed = (isCoinbaseTx && parseFloat(totalOutputValue) < parseFloat(blockRewardMax));

					+summaryRow(2 + (tx.weight ? 1 : 0) + (valueDestroyed ? 1 : 0) + (tx.locktime > 0 ? 1 : 0) + (parseInt(daysDestroyed) > 0 ? 1 : 0))
						+summaryItem("Version")
							| #{result.getrawtransaction.version}

						+summaryItem("Size")
							span #{tx.vsize.toLocaleString()}
							small.ms-1 vB

						if (tx.weight)
							+summaryItem("Weight", null, "wu", "Weight Units")
								span #{tx.weight.toLocaleString()}

						if (valueDestroyed)
							+summaryItem("Value Destroyed", "The miner of this transaction's block failed to collect this value. As a result, it is permanently lost.")
								- var currencyValue = new Decimal(blockRewardMax).minus(totalOutputValue);
								span.text-danger
									+valueDisplay(currencyValue)

						if (tx.locktime > 0)
							+summaryItem("Locktime")
								if (tx.locktime < 500000000)
									span.me-1 Spendable:
									a(href=`./block-height/${result.getrawtransaction.locktime}`) #{result.getrawtransaction.locktime.toLocaleString()}
									span +
									a.ms-2(href="https://developer.bitcoin.org/devguide/transactions.html#locktime-and-sequence-number", data-bs-toggle="tooltip", title="Read more about locktime", target="_blank")
										i.fas.fa-external-link-alt.small
								else
									span Spendable: #{moment.utc(new Date(result.getrawtransaction.locktime * 1000)).format("Y-MM-DD HH:mm:ss")}
										small.ms-1 utc
									a.ms-2(href="https://developer.bitcoin.org/devguide/transactions.html#locktime-and-sequence-number", data-bs-toggle="tooltip", title="Read more about locktime", target="_blank")
										i.fas.fa-external-link-alt.fs-6

						if (parseInt(daysDestroyed) > 0)
							- var daysDestroyedDesc = `The sum of all input values multiplied by the number of days that input's UTXO existed before being spent. Large values can sometimes be interesting, indicating the spending of long-dormant coins. A 1 ${coinConfig.ticker} UTXO spent after 7 days dormant results in 7 days destroyed, as does a 7 ${coinConfig.ticker} UTXO spent after 1 day dormant.`;
							
							+summaryItem("Days Destroyed", daysDestroyedDesc, `${coinConfig.ticker.toLowerCase().substring(0, 1)}d`, `${coinConfig.name} Days`)
								| #{utils.addThousandsSeparators(daysDestroyed.toDP(daysDestroyed > 1 ? 0 : 1))}


				
				- var inputsOutputsSectionTitle = `${tx.vin.length.toLocaleString()} Input${tx.vin.length == 1 ? "" : "s"}, ${tx.vout.length.toLocaleString()} Output${tx.vout.length == 1 ? "" : "s"}`;
				+contentSection(inputsOutputsSectionTitle)
					- var tx = result.getrawtransaction;
					- var txInputs = result.txInputs;
					- var blockHeight = -1;
					if (result && result.getblock)
						- blockHeight = result.getblock.height;
					include includes/transaction-io-details.pug
						

				if (mempoolDetails)
					if (mempoolDetails.ancestors.length > 0)
						div.card.shadow-sm.mb-3
							div.card-body.px-2.px-md-3
								h3.h6.mb-0
									span #{mempoolDetails.ancestors.length.toLocaleString()} 
									if (mempoolDetails.ancestors.length == 1)
										span Ancestor
									else
										span Ancestors
								hr

								ol.mb-0
									each ancestorTxid, ancestorIndex in mempoolDetails.ancestors
										li
											a.font-monospace(href=`./tx/${ancestorTxid}`) #{ancestorTxid}

					if (mempoolDetails.descendants.length > 0)
						div.card.shadow-sm.mb-3
							div.card-body.px-2.px-md-3
								h3.h6.mb-0
									span #{mempoolDetails.descendants.length.toLocaleString()} 
									if (mempoolDetails.descendants.length == 1)
										span Descendant
									else
										span Descendants
								hr

								ol.mb-0
									each descendantTxid, descendantIndex in mempoolDetails.descendants
										li
											a.font-monospace(href=`./tx/${descendantTxid}`) #{descendantTxid}

			
			+pageTab("Scripts")
				+contentSection("Input Scripts")
					table.table.table-borderless.table-striped
						thead
							tr
								th(style="width: 50px;")
								th Input
						tbody
							each vin, vinIndex in result.getrawtransaction.vin
								tr
									th.font-monospace
										a.badge.card-highlight.border.fw-normal(data-bs-toggle="tooltip", title=`Input #${vinIndex}`, style="white-space: nowrap;")
											span.me-1 &gt;
											| #{vinIndex.toLocaleString()}

									td.word-wrap.text-break.font-monospace
										if (vin.coinbase)
											div.font-monospace(style="line-height: 1.75em;")
												.badge.bg-success.me-2 coinbase
												br
												span.font-data #{vin.coinbase}
												br
												span.fw-bold.me-2 Ascii
												span.font-plaintext #{utils.hex2ascii(vin.coinbase)}

										if (vin.scriptSig && vin.scriptSig.asm)
											.mb-2
												.mb-2
													+darkBadge("scriptSig")
												span.font-data #{vin.scriptSig.asm}


										if (vin.txinwitness && vin.txinwitness.length > 0)
											.mb-2
												+darkBadge("witness")

											each witnessItem in vin.txinwitness
												span.font-data.me-3 #{witnessItem}

										
						

				+contentSection("Output Scripts")
					table.table.table-borderless.table-striped
						thead
							tr
								th(style="width: 50px;")
								th Script Pub Key (asm)
						tbody
							each vout, voutIndex in result.getrawtransaction.vout
								tr
									th.font-monospace
										a.badge.card-highlight.border.fw-normal(data-bs-toggle="tooltip", title=`Output #${(voutIndex + 1)}`, style="white-space: nowrap;")
											span.me-1 &lt;
											span.fw-normal #{voutIndex.toLocaleString()}

									td.font-monospace.word-wrap
										if (vout.scriptPubKey && vout.scriptPubKey.asm)
											- var chunks = vout.scriptPubKey.asm.split(" ");
											each chunk in chunks
												span.me-2
													if (chunk.startsWith("OP_"))
														+primaryBadge(chunk)
													else
														span.font-data #{chunk}

											if (vout.scriptPubKey.asm.startsWith("OP_RETURN"))
												br
												span.fw-bold.me-2 Ascii
												span.font-data #{utils.hex2ascii(vout.scriptPubKey.asm)}
						

			+pageTab("JSON")
				- var pillTabs = ["Transaction", "UTXOs"];
				if (mempoolDetails)
					- pillTabs.push("Mempool Details");

				+pillTabs(pillTabs)
				
				.tab-content
					+pageTab("Transaction", true)
						+contentSection("Transaction")
							pre
								code.text-json.json.bg-body(data-lang="json") #{JSON.stringify(result.getrawtransaction, null, 4)}

					
					+pageTab("UTXOs")
						+contentSection("UTXOs")
							pre
								code.text-json.json.bg-body(data-lang="json") #{JSON.stringify(utxos, null, 4)}
								

					if (mempoolDetails)
						+pageTab("Mempool Details")
							+contentSection("Mempool Details")
								pre
									code.json.bg-body(data-lang="json") #{JSON.stringify(mempoolDetails, null, 4)}

				//pre #{JSON.stringify(result.txInputs, null, 4)}

		
